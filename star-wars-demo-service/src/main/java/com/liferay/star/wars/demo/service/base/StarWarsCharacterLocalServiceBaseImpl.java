/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.star.wars.demo.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.liferay.star.wars.demo.model.StarWarsCharacter;
import com.liferay.star.wars.demo.service.StarWarsCharacterLocalService;
import com.liferay.star.wars.demo.service.persistence.StarWarsCharacterPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the star wars character local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.star.wars.demo.service.impl.StarWarsCharacterLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.star.wars.demo.service.impl.StarWarsCharacterLocalServiceImpl
 * @see com.liferay.star.wars.demo.service.StarWarsCharacterLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class StarWarsCharacterLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements StarWarsCharacterLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.star.wars.demo.service.StarWarsCharacterLocalServiceUtil} to access the star wars character local service.
	 */

	/**
	 * Adds the star wars character to the database. Also notifies the appropriate model listeners.
	 *
	 * @param starWarsCharacter the star wars character
	 * @return the star wars character that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StarWarsCharacter addStarWarsCharacter(
		StarWarsCharacter starWarsCharacter) {
		starWarsCharacter.setNew(true);

		return starWarsCharacterPersistence.update(starWarsCharacter);
	}

	/**
	 * Creates a new star wars character with the primary key. Does not add the star wars character to the database.
	 *
	 * @param starWarsCharacterId the primary key for the new star wars character
	 * @return the new star wars character
	 */
	@Override
	public StarWarsCharacter createStarWarsCharacter(long starWarsCharacterId) {
		return starWarsCharacterPersistence.create(starWarsCharacterId);
	}

	/**
	 * Deletes the star wars character with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param starWarsCharacterId the primary key of the star wars character
	 * @return the star wars character that was removed
	 * @throws PortalException if a star wars character with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StarWarsCharacter deleteStarWarsCharacter(long starWarsCharacterId)
		throws PortalException {
		return starWarsCharacterPersistence.remove(starWarsCharacterId);
	}

	/**
	 * Deletes the star wars character from the database. Also notifies the appropriate model listeners.
	 *
	 * @param starWarsCharacter the star wars character
	 * @return the star wars character that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public StarWarsCharacter deleteStarWarsCharacter(
		StarWarsCharacter starWarsCharacter) {
		return starWarsCharacterPersistence.remove(starWarsCharacter);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(StarWarsCharacter.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return starWarsCharacterPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.star.wars.demo.model.impl.StarWarsCharacterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return starWarsCharacterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.star.wars.demo.model.impl.StarWarsCharacterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return starWarsCharacterPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return starWarsCharacterPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return starWarsCharacterPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public StarWarsCharacter fetchStarWarsCharacter(long starWarsCharacterId) {
		return starWarsCharacterPersistence.fetchByPrimaryKey(starWarsCharacterId);
	}

	/**
	 * Returns the star wars character with the primary key.
	 *
	 * @param starWarsCharacterId the primary key of the star wars character
	 * @return the star wars character
	 * @throws PortalException if a star wars character with the primary key could not be found
	 */
	@Override
	public StarWarsCharacter getStarWarsCharacter(long starWarsCharacterId)
		throws PortalException {
		return starWarsCharacterPersistence.findByPrimaryKey(starWarsCharacterId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(starWarsCharacterLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StarWarsCharacter.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("starWarsCharacterId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(starWarsCharacterLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(StarWarsCharacter.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"starWarsCharacterId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(starWarsCharacterLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(StarWarsCharacter.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("starWarsCharacterId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return starWarsCharacterLocalService.deleteStarWarsCharacter((StarWarsCharacter)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return starWarsCharacterPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the star wars characters.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.star.wars.demo.model.impl.StarWarsCharacterModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of star wars characters
	 * @param end the upper bound of the range of star wars characters (not inclusive)
	 * @return the range of star wars characters
	 */
	@Override
	public List<StarWarsCharacter> getStarWarsCharacters(int start, int end) {
		return starWarsCharacterPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of star wars characters.
	 *
	 * @return the number of star wars characters
	 */
	@Override
	public int getStarWarsCharactersCount() {
		return starWarsCharacterPersistence.countAll();
	}

	/**
	 * Updates the star wars character in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param starWarsCharacter the star wars character
	 * @return the star wars character that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public StarWarsCharacter updateStarWarsCharacter(
		StarWarsCharacter starWarsCharacter) {
		return starWarsCharacterPersistence.update(starWarsCharacter);
	}

	/**
	 * Returns the star wars character local service.
	 *
	 * @return the star wars character local service
	 */
	public StarWarsCharacterLocalService getStarWarsCharacterLocalService() {
		return starWarsCharacterLocalService;
	}

	/**
	 * Sets the star wars character local service.
	 *
	 * @param starWarsCharacterLocalService the star wars character local service
	 */
	public void setStarWarsCharacterLocalService(
		StarWarsCharacterLocalService starWarsCharacterLocalService) {
		this.starWarsCharacterLocalService = starWarsCharacterLocalService;
	}

	/**
	 * Returns the star wars character persistence.
	 *
	 * @return the star wars character persistence
	 */
	public StarWarsCharacterPersistence getStarWarsCharacterPersistence() {
		return starWarsCharacterPersistence;
	}

	/**
	 * Sets the star wars character persistence.
	 *
	 * @param starWarsCharacterPersistence the star wars character persistence
	 */
	public void setStarWarsCharacterPersistence(
		StarWarsCharacterPersistence starWarsCharacterPersistence) {
		this.starWarsCharacterPersistence = starWarsCharacterPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.star.wars.demo.model.StarWarsCharacter",
			starWarsCharacterLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.star.wars.demo.model.StarWarsCharacter");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return StarWarsCharacterLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return StarWarsCharacter.class;
	}

	protected String getModelClassName() {
		return StarWarsCharacter.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = starWarsCharacterPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = StarWarsCharacterLocalService.class)
	protected StarWarsCharacterLocalService starWarsCharacterLocalService;
	@BeanReference(type = StarWarsCharacterPersistence.class)
	protected StarWarsCharacterPersistence starWarsCharacterPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}