/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.star.wars.demo.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.star.wars.demo.model.StarWarsCharacter;
import com.liferay.star.wars.demo.model.StarWarsCharacterModel;
import com.liferay.star.wars.demo.model.StarWarsCharacterSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StarWarsCharacter service. Represents a row in the &quot;StarWarsCharacter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link StarWarsCharacterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StarWarsCharacterImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StarWarsCharacterImpl
 * @see StarWarsCharacter
 * @see StarWarsCharacterModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class StarWarsCharacterModelImpl extends BaseModelImpl<StarWarsCharacter>
	implements StarWarsCharacterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a star wars character model instance should use the {@link StarWarsCharacter} interface instead.
	 */
	public static final String TABLE_NAME = "StarWarsCharacter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "starWarsCharacterId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "picture", Types.VARCHAR },
			{ "fraction", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("starWarsCharacterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("picture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fraction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table StarWarsCharacter (starWarsCharacterId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,picture VARCHAR(255) null,fraction VARCHAR(75) null,description STRING null)";
	public static final String TABLE_SQL_DROP = "drop table StarWarsCharacter";
	public static final String ORDER_BY_JPQL = " ORDER BY starWarsCharacter.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StarWarsCharacter.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.star.wars.demo.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.star.wars.demo.model.StarWarsCharacter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.star.wars.demo.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.star.wars.demo.model.StarWarsCharacter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.star.wars.demo.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.star.wars.demo.model.StarWarsCharacter"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long NAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StarWarsCharacter toModel(StarWarsCharacterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StarWarsCharacter model = new StarWarsCharacterImpl();

		model.setStarWarsCharacterId(soapModel.getStarWarsCharacterId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setPicture(soapModel.getPicture());
		model.setFraction(soapModel.getFraction());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StarWarsCharacter> toModels(
		StarWarsCharacterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StarWarsCharacter> models = new ArrayList<StarWarsCharacter>(soapModels.length);

		for (StarWarsCharacterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.star.wars.demo.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.star.wars.demo.model.StarWarsCharacter"));

	public StarWarsCharacterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _starWarsCharacterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStarWarsCharacterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _starWarsCharacterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StarWarsCharacter.class;
	}

	@Override
	public String getModelClassName() {
		return StarWarsCharacter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("starWarsCharacterId", getStarWarsCharacterId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("picture", getPicture());
		attributes.put("fraction", getFraction());
		attributes.put("description", getDescription());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long starWarsCharacterId = (Long)attributes.get("starWarsCharacterId");

		if (starWarsCharacterId != null) {
			setStarWarsCharacterId(starWarsCharacterId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String picture = (String)attributes.get("picture");

		if (picture != null) {
			setPicture(picture);
		}

		String fraction = (String)attributes.get("fraction");

		if (fraction != null) {
			setFraction(fraction);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getStarWarsCharacterId() {
		return _starWarsCharacterId;
	}

	@Override
	public void setStarWarsCharacterId(long starWarsCharacterId) {
		_starWarsCharacterId = starWarsCharacterId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getPicture() {
		if (_picture == null) {
			return StringPool.BLANK;
		}
		else {
			return _picture;
		}
	}

	@Override
	public void setPicture(String picture) {
		_picture = picture;
	}

	@JSON
	@Override
	public String getFraction() {
		if (_fraction == null) {
			return StringPool.BLANK;
		}
		else {
			return _fraction;
		}
	}

	@Override
	public void setFraction(String fraction) {
		_fraction = fraction;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			StarWarsCharacter.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StarWarsCharacter toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StarWarsCharacter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StarWarsCharacterImpl starWarsCharacterImpl = new StarWarsCharacterImpl();

		starWarsCharacterImpl.setStarWarsCharacterId(getStarWarsCharacterId());
		starWarsCharacterImpl.setGroupId(getGroupId());
		starWarsCharacterImpl.setCompanyId(getCompanyId());
		starWarsCharacterImpl.setUserId(getUserId());
		starWarsCharacterImpl.setUserName(getUserName());
		starWarsCharacterImpl.setCreateDate(getCreateDate());
		starWarsCharacterImpl.setModifiedDate(getModifiedDate());
		starWarsCharacterImpl.setName(getName());
		starWarsCharacterImpl.setPicture(getPicture());
		starWarsCharacterImpl.setFraction(getFraction());
		starWarsCharacterImpl.setDescription(getDescription());

		starWarsCharacterImpl.resetOriginalValues();

		return starWarsCharacterImpl;
	}

	@Override
	public int compareTo(StarWarsCharacter starWarsCharacter) {
		int value = 0;

		value = getName().compareTo(starWarsCharacter.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StarWarsCharacter)) {
			return false;
		}

		StarWarsCharacter starWarsCharacter = (StarWarsCharacter)obj;

		long primaryKey = starWarsCharacter.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		StarWarsCharacterModelImpl starWarsCharacterModelImpl = this;

		starWarsCharacterModelImpl._originalGroupId = starWarsCharacterModelImpl._groupId;

		starWarsCharacterModelImpl._setOriginalGroupId = false;

		starWarsCharacterModelImpl._setModifiedDate = false;

		starWarsCharacterModelImpl._originalName = starWarsCharacterModelImpl._name;

		starWarsCharacterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<StarWarsCharacter> toCacheModel() {
		StarWarsCharacterCacheModel starWarsCharacterCacheModel = new StarWarsCharacterCacheModel();

		starWarsCharacterCacheModel.starWarsCharacterId = getStarWarsCharacterId();

		starWarsCharacterCacheModel.groupId = getGroupId();

		starWarsCharacterCacheModel.companyId = getCompanyId();

		starWarsCharacterCacheModel.userId = getUserId();

		starWarsCharacterCacheModel.userName = getUserName();

		String userName = starWarsCharacterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			starWarsCharacterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			starWarsCharacterCacheModel.createDate = createDate.getTime();
		}
		else {
			starWarsCharacterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			starWarsCharacterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			starWarsCharacterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		starWarsCharacterCacheModel.name = getName();

		String name = starWarsCharacterCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			starWarsCharacterCacheModel.name = null;
		}

		starWarsCharacterCacheModel.picture = getPicture();

		String picture = starWarsCharacterCacheModel.picture;

		if ((picture != null) && (picture.length() == 0)) {
			starWarsCharacterCacheModel.picture = null;
		}

		starWarsCharacterCacheModel.fraction = getFraction();

		String fraction = starWarsCharacterCacheModel.fraction;

		if ((fraction != null) && (fraction.length() == 0)) {
			starWarsCharacterCacheModel.fraction = null;
		}

		starWarsCharacterCacheModel.description = getDescription();

		String description = starWarsCharacterCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			starWarsCharacterCacheModel.description = null;
		}

		return starWarsCharacterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{starWarsCharacterId=");
		sb.append(getStarWarsCharacterId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", picture=");
		sb.append(getPicture());
		sb.append(", fraction=");
		sb.append(getFraction());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.star.wars.demo.model.StarWarsCharacter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>starWarsCharacterId</column-name><column-value><![CDATA[");
		sb.append(getStarWarsCharacterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>picture</column-name><column-value><![CDATA[");
		sb.append(getPicture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fraction</column-name><column-value><![CDATA[");
		sb.append(getFraction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = StarWarsCharacter.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			StarWarsCharacter.class
		};
	private long _starWarsCharacterId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _originalName;
	private String _picture;
	private String _fraction;
	private String _description;
	private long _columnBitmask;
	private StarWarsCharacter _escapedModel;
}